<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/client/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;client&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@testing-library/dom&quot;: &quot;^10.4.1&quot;,&#10;    &quot;@testing-library/jest-dom&quot;: &quot;^6.8.0&quot;,&#10;    &quot;@testing-library/react&quot;: &quot;^16.3.0&quot;,&#10;    &quot;@testing-library/user-event&quot;: &quot;^13.5.0&quot;,&#10;    &quot;axios&quot;: &quot;^1.12.2&quot;,&#10;    &quot;jwt-decode&quot;: &quot;^4.0.0&quot;,&#10;    &quot;react&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-icons&quot;: &quot;^5.5.0&quot;,&#10;    &quot;react-router-dom&quot;: &quot;^7.9.1&quot;,&#10;    &quot;react-scripts&quot;: &quot;5.0.1&quot;,&#10;    &quot;web-vitals&quot;: &quot;^2.1.4&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;react-scripts start&quot;,&#10;    &quot;build&quot;: &quot;react-scripts build&quot;,&#10;    &quot;test&quot;: &quot;react-scripts test&quot;,&#10;    &quot;eject&quot;: &quot;react-scripts eject&quot;&#10;  },&#10;  &quot;eslintConfig&quot;: {&#10;    &quot;extends&quot;: [&#10;      &quot;react-app&quot;,&#10;      &quot;react-app/jest&quot;&#10;    ]&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;      &quot;not op_mini all&quot;&#10;    ],&#10;    &quot;development&quot;: [&#10;      &quot;last 1 chrome version&quot;,&#10;      &quot;last 1 firefox version&quot;,&#10;      &quot;last 1 safari version&quot;&#10;    ]&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;autoprefixer&quot;: &quot;^10.4.21&quot;,&#10;    &quot;postcss&quot;: &quot;^8.5.6&quot;&#10;  }&#10;  &#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;client&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;dependencies&quot;: {&#10;    &quot;@testing-library/dom&quot;: &quot;^10.4.1&quot;,&#10;    &quot;@testing-library/jest-dom&quot;: &quot;^6.8.0&quot;,&#10;    &quot;@testing-library/react&quot;: &quot;^16.3.0&quot;,&#10;    &quot;@testing-library/user-event&quot;: &quot;^13.5.0&quot;,&#10;    &quot;axios&quot;: &quot;^1.12.2&quot;,&#10;    &quot;jwt-decode&quot;: &quot;^4.0.0&quot;,&#10;    &quot;react&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^19.1.1&quot;,&#10;    &quot;react-icons&quot;: &quot;^5.5.0&quot;,&#10;    &quot;react-router-dom&quot;: &quot;^7.9.1&quot;,&#10;    &quot;react-scripts&quot;: &quot;5.0.1&quot;,&#10;    &quot;web-vitals&quot;: &quot;^2.1.4&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;start&quot;: &quot;react-scripts start&quot;,&#10;    &quot;build&quot;: &quot;react-scripts build&quot;,&#10;    &quot;test&quot;: &quot;react-scripts test&quot;,&#10;    &quot;eject&quot;: &quot;react-scripts eject&quot;,&#10;    &quot;vercel-build&quot;: &quot;npm run build&quot;&#10;  },&#10;  &quot;eslintConfig&quot;: {&#10;    &quot;extends&quot;: [&#10;      &quot;react-app&quot;,&#10;      &quot;react-app/jest&quot;&#10;    ]&#10;  },&#10;  &quot;browserslist&quot;: {&#10;    &quot;production&quot;: [&#10;      &quot;&gt;0.2%&quot;,&#10;      &quot;not dead&quot;,&#10;      &quot;not op_mini all&quot;&#10;    ],&#10;    &quot;development&quot;: [&#10;      &quot;last 1 chrome version&quot;,&#10;      &quot;last 1 firefox version&quot;,&#10;      &quot;last 1 safari version&quot;&#10;    ]&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;autoprefixer&quot;: &quot;^10.4.21&quot;,&#10;    &quot;postcss&quot;: &quot;^8.5.6&quot;&#10;  }&#10;  &#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/api/api.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/api/api.js" />
              <option name="originalContent" value="import axios from 'axios';&#10;&#10;const API = axios.create({ baseURL: 'http://localhost:5000/api' });&#10;&#10;&#10;// Add interceptor for backend auth&#10;API.interceptors.request.use((config) =&gt; {&#10;  const token = localStorage.getItem('token');&#10;  if (token) {&#10;    config.headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  return config;&#10;}, (error) =&gt; Promise.reject(error));&#10;&#10;// Fetch books from Google by search term (title/name)&#10;export const searchBooksFromGoogle = async (searchTerm) =&gt; {&#10;  try {&#10;    const response = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=intitle:${searchTerm}&amp;maxResults=10`);&#10;    if (response.data.items) {&#10;      return response.data.items.map(item =&gt; {&#10;        const volumeInfo = item.volumeInfo;&#10;        const saleInfo = item.saleInfo;&#10;        return {&#10;          title: volumeInfo.title || 'Unknown Title',&#10;          author: volumeInfo.authors ? volumeInfo.authors.join(', ') : 'Unknown Author',&#10;          genre: volumeInfo.categories ? volumeInfo.categories[0] : 'Unknown Genre',&#10;          description: volumeInfo.description || 'No description available.',&#10;          isbn: volumeInfo.industryIdentifiers ? volumeInfo.industryIdentifiers[0]?.identifier : null,&#10;          publicationYear: volumeInfo.publishedDate ? new Date(volumeInfo.publishedDate).getFullYear() : null,&#10;          coverImage: volumeInfo.imageLinks ? volumeInfo.imageLinks.thumbnail : 'https://placehold.co/200x300',&#10;          googleBooksId: item.id,&#10;          averageRating: volumeInfo.averageRating || null,&#10;          purchaseOptions: saleInfo.buyLink ? [{ platform: 'Google Books', url: saleInfo.buyLink, price: saleInfo.listPrice ? saleInfo.listPrice.amount : 0 }] : [],&#10;        };&#10;      });&#10;    } else {&#10;      throw new Error('No books found');&#10;    }&#10;  } catch (error) {&#10;    throw new Error('Error searching books');&#10;  }&#10;};&#10;&#10;// Fetch random/popular books (with startIndex for variety)&#10;export const fetchRandomBooksFromGoogle = async (maxResults = 6) =&gt; {&#10;  const startIndex = Math.floor(Math.random() * 100); // Random start for variety&#10;  try {&#10;    const response = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=subject:fiction&amp;startIndex=${startIndex}&amp;maxResults=${maxResults}`);&#10;    if (response.data.items) {&#10;      return response.data.items.map(item =&gt; {&#10;        const volumeInfo = item.volumeInfo;&#10;        const saleInfo = item.saleInfo;&#10;        return {&#10;          title: volumeInfo.title || 'Unknown Title',&#10;          author: volumeInfo.authors ? volumeInfo.authors.join(', ') : 'Unknown Author',&#10;          genre: volumeInfo.categories ? volumeInfo.categories[0] : 'Unknown Genre',&#10;          description: volumeInfo.description || 'No description available.',&#10;          isbn: volumeInfo.industryIdentifiers ? volumeInfo.industryIdentifiers[0]?.identifier : null,&#10;          publicationYear: volumeInfo.publishedDate ? new Date(volumeInfo.publishedDate).getFullYear() : null,&#10;          coverImage: volumeInfo.imageLinks ? volumeInfo.imageLinks.thumbnail : 'https://placehold.co/200x300',&#10;          googleBooksId: item.id,&#10;          averageRating: volumeInfo.averageRating || null,&#10;          purchaseOptions: saleInfo.buyLink ? [{ platform: 'Google Books', url: saleInfo.buyLink, price: saleInfo.listPrice ? saleInfo.listPrice.amount : 0 }] : [],&#10;        };&#10;      });&#10;    } else {&#10;      throw new Error('No books found');&#10;    }&#10;  } catch (error) {&#10;    throw new Error('Error fetching random books');&#10;  }&#10;};&#10;&#10;// Auth and User Profile functions&#10;export const login = (formData) =&gt; API.post('/auth/login', formData);&#10;export const register = (formData) =&gt; API.post('/auth/register', formData);&#10;export const getProfile = (userId) =&gt; API.get(`/users/${userId}/profile`);&#10;export const uploadProfilePic = async (userId, file) =&gt; {&#10;  const formData = new FormData();&#10;  formData.append('profilePic', file);&#10;  return API.put(`/users/${userId}/profile`, formData, {&#10;    headers: { 'Content-Type': 'multipart/form-data' },&#10;  });&#10;};&#10;&#10;export const SearchBooksFromGoogle = async (searchTerm) =&gt; { /* ... */ };&#10;export const FetchRandomBooksFromGoogle = async (maxResults = 6) =&gt; { /* ... */ };" />
              <option name="updatedContent" value="import axios from 'axios';&#10;&#10;const API = axios.create({ &#10;  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000/api' &#10;});&#10;&#10;&#10;// Add interceptor for backend auth&#10;API.interceptors.request.use((config) =&gt; {&#10;  const token = localStorage.getItem('token');&#10;  if (token) {&#10;    config.headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  return config;&#10;}, (error) =&gt; Promise.reject(error));&#10;&#10;// Fetch books from Google by search term (title/name)&#10;export const searchBooksFromGoogle = async (searchTerm) =&gt; {&#10;  try {&#10;    const response = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=intitle:${searchTerm}&amp;maxResults=10`);&#10;    if (response.data.items) {&#10;      return response.data.items.map(item =&gt; {&#10;        const volumeInfo = item.volumeInfo;&#10;        const saleInfo = item.saleInfo;&#10;        return {&#10;          title: volumeInfo.title || 'Unknown Title',&#10;          author: volumeInfo.authors ? volumeInfo.authors.join(', ') : 'Unknown Author',&#10;          genre: volumeInfo.categories ? volumeInfo.categories[0] : 'Unknown Genre',&#10;          description: volumeInfo.description || 'No description available.',&#10;          isbn: volumeInfo.industryIdentifiers ? volumeInfo.industryIdentifiers[0]?.identifier : null,&#10;          publicationYear: volumeInfo.publishedDate ? new Date(volumeInfo.publishedDate).getFullYear() : null,&#10;          coverImage: volumeInfo.imageLinks ? volumeInfo.imageLinks.thumbnail : 'https://placehold.co/200x300',&#10;          googleBooksId: item.id,&#10;          averageRating: volumeInfo.averageRating || null,&#10;          purchaseOptions: saleInfo.buyLink ? [{ platform: 'Google Books', url: saleInfo.buyLink, price: saleInfo.listPrice ? saleInfo.listPrice.amount : 0 }] : [],&#10;        };&#10;      });&#10;    } else {&#10;      throw new Error('No books found');&#10;    }&#10;  } catch (error) {&#10;    throw new Error('Error searching books');&#10;  }&#10;};&#10;&#10;// Fetch random/popular books (with startIndex for variety)&#10;export const fetchRandomBooksFromGoogle = async (maxResults = 6) =&gt; {&#10;  const startIndex = Math.floor(Math.random() * 100); // Random start for variety&#10;  try {&#10;    const response = await axios.get(`https://www.googleapis.com/books/v1/volumes?q=subject:fiction&amp;startIndex=${startIndex}&amp;maxResults=${maxResults}`);&#10;    if (response.data.items) {&#10;      return response.data.items.map(item =&gt; {&#10;        const volumeInfo = item.volumeInfo;&#10;        const saleInfo = item.saleInfo;&#10;        return {&#10;          title: volumeInfo.title || 'Unknown Title',&#10;          author: volumeInfo.authors ? volumeInfo.authors.join(', ') : 'Unknown Author',&#10;          genre: volumeInfo.categories ? volumeInfo.categories[0] : 'Unknown Genre',&#10;          description: volumeInfo.description || 'No description available.',&#10;          isbn: volumeInfo.industryIdentifiers ? volumeInfo.industryIdentifiers[0]?.identifier : null,&#10;          publicationYear: volumeInfo.publishedDate ? new Date(volumeInfo.publishedDate).getFullYear() : null,&#10;          coverImage: volumeInfo.imageLinks ? volumeInfo.imageLinks.thumbnail : 'https://placehold.co/200x300',&#10;          googleBooksId: item.id,&#10;          averageRating: volumeInfo.averageRating || null,&#10;          purchaseOptions: saleInfo.buyLink ? [{ platform: 'Google Books', url: saleInfo.buyLink, price: saleInfo.listPrice ? saleInfo.listPrice.amount : 0 }] : [],&#10;        };&#10;      });&#10;    } else {&#10;      throw new Error('No books found');&#10;    }&#10;  } catch (error) {&#10;    throw new Error('Error fetching random books');&#10;  }&#10;};&#10;&#10;// Auth and User Profile functions&#10;export const login = (formData) =&gt; API.post('/auth/login', formData);&#10;export const register = (formData) =&gt; API.post('/auth/register', formData);&#10;export const getProfile = (userId) =&gt; API.get(`/users/${userId}/profile`);&#10;export const uploadProfilePic = async (userId, file) =&gt; {&#10;  const formData = new FormData();&#10;  formData.append('profilePic', file);&#10;  return API.put(`/users/${userId}/profile`, formData, {&#10;    headers: { 'Content-Type': 'multipart/form-data' },&#10;  });&#10;};&#10;&#10;export const SearchBooksFromGoogle = async (searchTerm) =&gt; { /* ... */ };&#10;export const FetchRandomBooksFromGoogle = async (maxResults = 6) =&gt; { /* ... */ };" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/server.js" />
              <option name="originalContent" value="const express = require('express');&#10;const dotenv = require('dotenv');&#10;const cors = require('cors');&#10;const connectDB = require('./config/db');&#10;const authRoutes = require('./routes/authRoutes');&#10;const userRoutes = require('./routes/userRoutes');&#10;const path = require('path');&#10;&#10;dotenv.config();&#10;connectDB();&#10;&#10;const app = express();&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Serve static files for uploads&#10;app.use('/uploads', express.static(path.join(__dirname, 'uploads')));&#10;&#10;app.use('/api/auth', authRoutes);&#10;app.use('/api/users', userRoutes);&#10;&#10;const PORT = process.env.PORT || 5000;&#10;app.listen(PORT, () =&gt; console.log(`Server running on port ${PORT}`));" />
              <option name="updatedContent" value="const express = require('express');&#10;const dotenv = require('dotenv');&#10;const cors = require('cors');&#10;const connectDB = require('./config/db');&#10;const authRoutes = require('./routes/authRoutes');&#10;const userRoutes = require('./routes/userRoutes');&#10;const path = require('path');&#10;&#10;dotenv.config();&#10;connectDB();&#10;&#10;const app = express();&#10;app.use(cors());&#10;app.use(express.json());&#10;&#10;// Serve static files for uploads&#10;app.use('/uploads', express.static(path.join(__dirname, 'uploads')));&#10;&#10;app.use('/api/auth', authRoutes);&#10;app.use('/api/users', userRoutes);&#10;&#10;// Export the Express API for Vercel&#10;module.exports = app;&#10;&#10;// Only start server if not in Vercel environment&#10;if (process.env.NODE_ENV !== 'production') {&#10;  const PORT = process.env.PORT || 5000;&#10;  app.listen(PORT, () =&gt; console.log(`Server running on port ${PORT}`));&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vercel.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vercel.json" />
              <option name="originalContent" value="{&#10;  &quot;version&quot;: 2,&#10;  &quot;builds&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;client/package.json&quot;,&#10;      &quot;use&quot;: &quot;@vercel/static-build&quot;,&#10;      &quot;config&quot;: { &quot;distDir&quot;: &quot;client/build&quot; }&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;server/server.js&quot;,&#10;      &quot;use&quot;: &quot;@vercel/node&quot;&#10;    },&#10;    { &quot;rewrites&quot;: [{ &quot;source&quot;: &quot;/(.*)&quot;, &quot;destination&quot;: &quot;/&quot; }] }&#10;  ],&#10;  &quot;routes&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/api/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;server/server.js&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/static/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;client/build/static/$1&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*\\.(js|css|ico|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot))&quot;,&#10;      &quot;dest&quot;: &quot;client/build/$1&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;client/build/index.html&quot;&#10;    }&#10;  ]&#10;}" />
              <option name="updatedContent" value="{&#10;  &quot;version&quot;: 2,&#10;  &quot;builds&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;client/package.json&quot;,&#10;      &quot;use&quot;: &quot;@vercel/static-build&quot;,&#10;      &quot;config&quot;: { &#10;        &quot;distDir&quot;: &quot;build&quot;&#10;      }&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;server/server.js&quot;,&#10;      &quot;use&quot;: &quot;@vercel/node&quot;&#10;    }&#10;  ],&#10;  &quot;routes&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/api/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;server/server.js&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/uploads/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;server/server.js&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*\\.(js|css|ico|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot|map))&quot;,&#10;      &quot;dest&quot;: &quot;client/build/$1&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;client/build/index.html&quot;&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>