<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/client/src/pages/BookshelfPage.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/pages/BookshelfPage.jsx" />
              <option name="originalContent" value="import { useState, useEffect } from 'react';&#10;import { searchBooksFromGoogle, fetchRandomBooksFromGoogle } from '../api/api';&#10;import BookCard from '../components/BookCard';&#10;import BookDetailsModal from '../components/BookDetailsModal';&#10;import { MdLibraryBooks } from 'react-icons/md';&#10;import useAuth from '../hooks/useAuth';&#10;import { MdSearch } from 'react-icons/md';&#10;&#10;const BookshelfPage = () =&gt; {&#10;  const [books, setBooks] = useState([]);&#10;  const [search, setSearch] = useState('');&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState('');&#10;  const [selectedBook, setSelectedBook] = useState(null);&#10;  const [isModalOpen, setIsModalOpen] = useState(false);&#10;  &#10;  useEffect(() =&gt; {&#10;    const loadRandomBooks = async () =&gt; {&#10;      try {&#10;        setError('');&#10;        const randomBooks = await fetchRandomBooksFromGoogle();&#10;        setBooks(randomBooks);&#10;      } catch (err) {&#10;        setError(err.message || 'Failed to load random books');&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;    loadRandomBooks();&#10;  }, []);&#10;&#10;  const handleSearch = async () =&gt; {&#10;    if (!search) return;&#10;    setLoading(true);&#10;    setError('');&#10;    try {&#10;      const searchedBooks = await searchBooksFromGoogle(search);&#10;      setBooks(searchedBooks);&#10;    } catch (err) {&#10;      setError(err.message || 'Failed to search books');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleBookClick = (book) =&gt; {&#10;    setSelectedBook(book);&#10;    setIsModalOpen(true);&#10;  };&#10;&#10;  if (loading) return &lt;div className=&quot;container mx-auto p-4 text-center&quot;&gt;Loading books...&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div className=&quot;container mx-auto p-6&quot;&gt;&#10;      &lt;div className=&quot;flex items-center mb-6&quot;&gt;&#10;        &lt;MdLibraryBooks className=&quot;text-3xl text-teal-600 mr-3&quot; /&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-teal-800&quot;&gt;My Bookshelf&lt;/h1&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;mb-6 flex items-center&quot;&gt;&#10;        &lt;div className=&quot;relative w-full md:w-3/4&quot;&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            placeholder=&quot;Search books by name...&quot;&#10;            value={search}&#10;            onChange={(e) =&gt; setSearch(e.target.value)}&#10;            className=&quot;w-full p-3 pl-10 border border-teal-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-700&quot;&#10;          /&gt;&#10;          &lt;MdSearch className=&quot;absolute left-3 top-3 text-teal-600&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;button&#10;          onClick={handleSearch}&#10;          className=&quot;ml-4 bg-teal-700 text-gold-600 py-3 px-6 rounded-lg hover:bg-teal-600 transition-colors disabled:opacity-50&quot;&#10;          disabled={loading}&#10;        &gt;&#10;          {loading ? 'Searching...' : 'Search'}&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      {error &amp;&amp; &lt;p className=&quot;text-red-500 mb-4 text-center&quot;&gt;{error}&lt;/p&gt;}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6&quot;&gt;&#10;        {books.length &gt; 0 ? (&#10;          books.map((book) =&gt; (&#10;            &lt;BookCard key={book.googleBooksId} book={book} onClick={handleBookClick} /&gt;&#10;          ))&#10;        ) : (&#10;          &lt;p className=&quot;text-center text-gray-500&quot;&gt;No books found.&lt;/p&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;BookDetailsModal&#10;        book={selectedBook}&#10;        isOpen={isModalOpen}&#10;        onClose={() =&gt; setIsModalOpen(false)}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default BookshelfPage;" />
              <option name="updatedContent" value="import { useState, useEffect } from 'react';&#10;import { searchBooksFromGoogle, fetchRandomBooksFromGoogle } from '../api/api';&#10;import BookCard from '../components/BookCard';&#10;import BookDetailsModal from '../components/BookDetailsModal';&#10;import { MdLibraryBooks } from 'react-icons/md';&#10;import { MdSearch } from 'react-icons/md';&#10;&#10;const BookshelfPage = () =&gt; {&#10;  const [books, setBooks] = useState([]);&#10;  const [search, setSearch] = useState('');&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState('');&#10;  const [selectedBook, setSelectedBook] = useState(null);&#10;  const [isModalOpen, setIsModalOpen] = useState(false);&#10;  &#10;  useEffect(() =&gt; {&#10;    const loadRandomBooks = async () =&gt; {&#10;      try {&#10;        setError('');&#10;        const randomBooks = await fetchRandomBooksFromGoogle();&#10;        setBooks(randomBooks);&#10;      } catch (err) {&#10;        setError(err.message || 'Failed to load random books');&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;    loadRandomBooks();&#10;  }, []);&#10;&#10;  const handleSearch = async () =&gt; {&#10;    if (!search) return;&#10;    setLoading(true);&#10;    setError('');&#10;    try {&#10;      const searchedBooks = await searchBooksFromGoogle(search);&#10;      setBooks(searchedBooks);&#10;    } catch (err) {&#10;      setError(err.message || 'Failed to search books');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleBookClick = (book) =&gt; {&#10;    setSelectedBook(book);&#10;    setIsModalOpen(true);&#10;  };&#10;&#10;  if (loading) return &lt;div className=&quot;container mx-auto p-4 text-center&quot;&gt;Loading books...&lt;/div&gt;;&#10;&#10;  return (&#10;    &lt;div className=&quot;container mx-auto p-6&quot;&gt;&#10;      &lt;div className=&quot;flex items-center mb-6&quot;&gt;&#10;        &lt;MdLibraryBooks className=&quot;text-3xl text-teal-600 mr-3&quot; /&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-teal-800&quot;&gt;My Bookshelf&lt;/h1&gt;&#10;      &lt;/div&gt;&#10;      &lt;div className=&quot;mb-6 flex items-center&quot;&gt;&#10;        &lt;div className=&quot;relative w-full md:w-3/4&quot;&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            placeholder=&quot;Search books by name...&quot;&#10;            value={search}&#10;            onChange={(e) =&gt; setSearch(e.target.value)}&#10;            className=&quot;w-full p-3 pl-10 border border-teal-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-700&quot;&#10;          /&gt;&#10;          &lt;MdSearch className=&quot;absolute left-3 top-3 text-teal-600&quot; /&gt;&#10;        &lt;/div&gt;&#10;        &lt;button&#10;          onClick={handleSearch}&#10;          className=&quot;ml-4 bg-teal-700 text-gold-600 py-3 px-6 rounded-lg hover:bg-teal-600 transition-colors disabled:opacity-50&quot;&#10;          disabled={loading}&#10;        &gt;&#10;          {loading ? 'Searching...' : 'Search'}&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      {error &amp;&amp; &lt;p className=&quot;text-red-500 mb-4 text-center&quot;&gt;{error}&lt;/p&gt;}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-6&quot;&gt;&#10;        {books.length &gt; 0 ? (&#10;          books.map((book) =&gt; (&#10;            &lt;BookCard key={book.googleBooksId} book={book} onClick={handleBookClick} /&gt;&#10;          ))&#10;        ) : (&#10;          &lt;p className=&quot;text-center text-gray-500&quot;&gt;No books found.&lt;/p&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;      &lt;BookDetailsModal&#10;        book={selectedBook}&#10;        isOpen={isModalOpen}&#10;        onClose={() =&gt; setIsModalOpen(false)}&#10;      /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default BookshelfPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vercel.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vercel.json" />
              <option name="originalContent" value="{&#10;  &quot;version&quot;: 2,&#10;  &quot;builds&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;client/package.json&quot;,&#10;      &quot;use&quot;: &quot;@vercel/static-build&quot;,&#10;      &quot;config&quot;: { &quot;distDir&quot;: &quot;build&quot; }&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;server/server.js&quot;,&#10;      &quot;use&quot;: &quot;@vercel/node&quot;&#10;    }&#10;  ],&#10;  &quot;routes&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/api/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;server/server.js&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;client/build/$1&quot;&#10;    }&#10;  ],&#10;  &quot;outputDirectory&quot;: &quot;client/build&quot;&#10;}" />
              <option name="updatedContent" value="{&#10;  &quot;version&quot;: 2,&#10;  &quot;builds&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;client/package.json&quot;,&#10;      &quot;use&quot;: &quot;@vercel/static-build&quot;,&#10;      &quot;config&quot;: { &quot;distDir&quot;: &quot;build&quot; }&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;server/server.js&quot;,&#10;      &quot;use&quot;: &quot;@vercel/node&quot;&#10;    }&#10;  ],&#10;  &quot;routes&quot;: [&#10;    {&#10;      &quot;src&quot;: &quot;/api/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;server/server.js&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/static/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;client/build/static/$1&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*\\.(js|css|ico|png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot))&quot;,&#10;      &quot;dest&quot;: &quot;client/build/$1&quot;&#10;    },&#10;    {&#10;      &quot;src&quot;: &quot;/(.*)&quot;,&#10;      &quot;dest&quot;: &quot;client/build/index.html&quot;&#10;    }&#10;  ],&#10;  &quot;outputDirectory&quot;: &quot;client/build&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>